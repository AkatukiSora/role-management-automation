generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ExternalServiceName {
  DISCORD
  VRCHAT
  GITHUB
}

model User {
  id              String      @id @default(uuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  namespaces      Namespace[]
  ownedNamespaces Namespace[] @relation("GroupOwner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Namespace {
  id               String                     @id @default(uuid())
  name             String
  members          Member[]
  memberExternalAccounts MemberExternalServiceAccount[]
  tags             Tag[]
  owner            User                       @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId          String
  admins           User[]
  externalAccounts ExternalServiceAccount[]
  externalGroups   ExternalServiceGroup[]
  externalMappings ExternalServiceGroupRoleMapping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String
  tags        Tag[]
  externalAccounts MemberExternalServiceAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberExternalServiceAccount {
  id          String    @id @default(uuid())

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    String

  service    ExternalServiceName
  name       String
  serviceId  String
  serviceUsername String?
  icon       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([service, serviceId, namespaceId])
}

model Tag {
  id          String    @id @default(uuid())
  name        String
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String
  members     Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, namespaceId])
}

model ExternalServiceAccount {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  name       String
  service    ExternalServiceName
  credential String @db.Text
  icon       String?

  groups ExternalServiceGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([service, namespaceId])
}

model ExternalServiceGroup {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  account   ExternalServiceAccount @relation(fields: [accountId], references: [id])
  accountId String

  name    String
  groupId String
  icon    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, namespaceId])
}

model ExternalServiceGroupRoleMapping {
  id         String    @id @default(uuid())
  namespace  Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  conditions String @db.Text
  actions    String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------- nextauth-prisma schema -------

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
